
namespace JREndean.Lang.Test
{
    using System;
    using System.IO;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class OpenTest
    {
        [TestMethod]
        public void OpenFileTest()
        {
            var tempFile = Path.GetTempFileName();

            Create.New.File(tempFile).Error(e => Assert.Fail());
            Assert.IsTrue(File.Exists(tempFile));
            
            Open.File(tempFile).Delete().Error(e => Assert.Fail());
            Assert.IsFalse(File.Exists(tempFile));

            tempFile = Path.GetTempFileName();
            Create.New.File(tempFile).Write("Hello World").Error(e => Assert.Fail());
            Open.File(tempFile).Read(c => Assert.AreEqual("Hello World", c)).Error(e => Assert.Fail());
            Delete.File(tempFile).Error(e => Assert.Fail());

            tempFile = Path.GetTempFileName();
            Create.New.File(tempFile).Error(e => Assert.Fail());
            Open.File(tempFile).Write("Hello World 1234").Error(e => Assert.Fail());
            Open.File(tempFile).Read(c => Assert.AreEqual("Hello World 1234", c)).Error(e => Assert.Fail());
            Delete.File(tempFile).Error(e => Assert.Fail());

            tempFile = Path.GetTempFileName();
            Create.New.File(tempFile).Error(e => Assert.Fail());
            Open.File(tempFile).Write("Hello World 56789").Read(c => Assert.AreEqual("Hello World 56789", c)).Error(e => Assert.Fail());
            Delete.File(tempFile).Error(e => Assert.Fail());

            tempFile = Path.GetTempFileName();
            Create.New.File(tempFile).Error(e => Assert.Fail());
            Open.File(tempFile).Write(() => { return "Hello World 0000"; }).Read(c => Assert.AreEqual("Hello World 0000", c)).Error(e => Assert.Fail());
            Delete.File(tempFile).Error(e => Assert.Fail());
        }

        [TestMethod]
        public void OpenFileUriTest()
        {
            var tempFile = new Uri(Path.GetTempFileName());

            Create.New.File(tempFile).Error(e => Assert.Fail());
            Assert.IsTrue(File.Exists(tempFile.LocalPath));

            Open.File(tempFile).Delete().Error(e => Assert.Fail());
            Assert.IsFalse(File.Exists(tempFile.LocalPath));
        }

        [TestMethod]
        public void OpenFileErrorsTest()
        {
            var tempFile = Path.GetTempFileName();

            //Open.File(tempFile).Delete().Error(e => Assert.Fail());
            //Assert.IsFalse(File.Exists(tempFile));

            //tempFile = Path.GetTempFileName();
            //Open.File(tempFile).Read(c => { }).Error(e => Assert.IsInstanceOfType(e, typeof(Exception)));

            //tempFile = Path.GetTempFileName();
            //Open.File(tempFile).Write("Hello World 1234").Error(e => Assert.Fail());
        }

        [TestMethod]
        public void OpenWebTest()
        {
            // TODO: 
            Open.Website("http://www.microsoft.com").Read(c => {/*Assert.IsTrue(c.Length > 0)*/});
            Open.Website("http://www.microsoft.com").Write("");
            Open.Website("http://www.microsoft.com").Write(() => { return ""; });
        }

        [TestMethod]
        public void OpenWebUriTest()
        {
            // TODO: 
            Open.Website(new Uri("http://www.microsoft.com")).Read(c => {/*Assert.IsTrue(c.Length > 0)*/});
        }
    }
}
